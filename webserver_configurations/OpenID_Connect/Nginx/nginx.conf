# WARNING:
# This is an example configuration. You may want to check and only integrate necessary parts to
# fit your particular setup.
# Most interesting settings are under conf.d/* and not in this configuration file. You might still need to look here to
# get a basic OpenResty (Nginx+Lua) setup running.
#
worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  text/html;
    sendfile        on;
    keepalive_timeout  65;

    ## http section configuration that is required for lua-resty-openidc
    # You may want to use your own resolver here. It's necessary for Lua to function.
    # If using a local DNS cache, you should use 127.0.0.1
    resolver 8.8.8.8;

    # The Lua package path is important, and must match your installation/setup.
    # If you get any issue with packages not found in your error logs ("require" failures), add the missing path here.
    lua_package_path '~/lua/?.lua;/usr/share/lua/5.1/?.lua;;';
    lua_package_cpath '/usr/share/lua/5.1/?.so;/usr/lib64/lua/5.1/?.so;;';

    lua_ssl_trusted_certificate "/etc/ssl/certs/ca-bundle.crt";
    lua_ssl_verify_depth 5;
    lua_shared_dict discovery 1m;
    lua_shared_dict introspection 15m;
    lua_shared_dict sessions 10m;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;
    # Default CSP
    add_header Content-Security-Policy "default-src 'none'; img-src 'self'; font-src 'self'; style-src 'self'";
    # Default XCTO
    add_header X-Content-Type-Options nosniff;
    # No iframes
    add_header X-Frame-Options DENY;
    # No XSS
    add_header X-XSS-Protection "1; mode=block";

    # Redirects to HTTPS (this block is only needed if you need a redirect).
    # Replace testrp.security.allizom.org  by your own URL if you use this.
    server {
        listen       80;
        server_name  testrp.security.allizom.org default_server;
        root         /dev/null;
        include letsencrypt.conf;
        location / {
            return       301   https://testrp.security.allizom.org$request_uri;
        }
    }

    # This is the main configuration for the HTTPS server.
    # Replace testrp.security.allizom.org  by your own URL if you use this.
    # This one server is NOT PROTECTED by OIDC, it's used as an entry site with links
    server {
        listen       443 ssl;
        server_name  testrp.security.allizom.org;
        # Replace by your own webroot. This repository also has a copy of the webroot for
        # demonstration purposes only.
	root         /var/www/nginx/;
        error_page   500 502 503 504  /50x.html;
        index index.html;

        ## TLS setup for this particular host (you'll want to change this, if you use this)
        # See also https://mozilla.github.io/server-side-tls/ssl-config-generator/
        ssl_certificate      "/etc/letsencrypt/live/testrp.security.allizom.org/fullchain.pem";
        ssl_certificate_key  "/etc/letsencrypt/live/testrp.security.allizom.org/privkey.pem";
        ssl_session_tickets off;
        ssl_session_cache    shared:SSL:50m;
        ssl_session_timeout 1d;

        # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
        ssl_dhparam /usr/local/openresty/nginx/dhparam.pem;
        ssl_protocols TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;
        include letsencrypt.conf;
    }
    # This is where you include your servers
    # The demo ones ARE PROTECTED by OIDC
    include conf.d/*.conf;
}
